#!/usr/bin/env bash
#
# Copyright (C) 2012, Christopher A. Snapp <snappca@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# enable unbound variable checking
set -u

USER="${USER:-$(id -un)}"

# os check
[[ "$(uname -s)" != 'SunOS' ]] || { echo 'ERROR: this script is known not to work on Solaris'; exit 1; }

# dependency check
[[ "$(which expect)" ]] || { echo 'ERROR: expect command is not available'; exit 1; }

prog='ssh-exec'
version=13.06
username="$USER"
concurrency=1
continue=false
output_file=/dev/null
output_dir=
commands=
login_password_pattern='#null#'
root_password_pattern='#null#'
sudo_password_pattern='#null#'
password_patterns=( )
password_prompts=( )
hosts=( )
interactive=false
password_auth=false
debug=false
quiet=false
silent=false
verbose=false
ssh_agent=true
load_ssh_agent=false
su=false
sudo=false

recipes_dir="$HOME/.ssh-exec"

tmp_dir="$(mktemp -dt $prog.XXXXX)" || error 'cannot create temp directory!'
script="${tmp_dir}/commands.exp"

trap 'rm -rf $tmp_dir; rmdir $output_dir 2>/dev/null; $load_ssh_agent && ssh_agent_destroy; exit;' EXIT
trap 'stty echo; cat $tmp_dir/*.{running,log} 2>/dev/null; echo -e "\nAborted!" >&2; rm -rf $tmp_dir; jobs -p | xargs kill 2>/dev/null; $load_ssh_agent && ssh_agent_destroy; exit;' INT TERM

# initialize expect script used during ssh session
cat > "$script" <<'EXPECT'
#!/usr/bin/expect
set timeout 20
set prompt "(>|%|#|\\$) *(\x1B.*)* *$"
set root_prompt "# *(\x1B.*)* *$"
set username "#username#"
set host "#host#"
set root_password "#password1#"
set sudo_password "#password2#"
set login_password "#password3#"

log_user 0

spawn -noecho ssh $username@$host
set connected 1

expect_after {
    timeout {
        send_user "\n\n                   #  Aborted! - Timeout Looking for Prompt: $host  #\n"
        exit 1
    } default {
        send_user "\n\n                   #  Aborted! - Error State Observed: $host  #\n"
        exit 1
    }
}

expect "*nter passphrase" {
    send_user "\n\n                   #  Aborted! - Missing Passphrase: $host  #\n"
    return
} "*denied" {
    send_user "\n\n                   #  Aborted! - Permission Denied: $host  #\n"
    return
} "*yes/no" {
    send_user "\n\n                   # Accepting Authenticity: $host #\n"
    send "yes\r"
    expect -re $prompt {
        send_user "\n\n                   #       Connect:     $host       #\n"
        send "\r"
        log_user 1
    }
} "*ssword:" {
    if {"$login_password" == "#null#"} {
        send_user "\n\n                   #  Aborted! - No Login Password Available: $host  #\n"
        return
    }

    send "$login_password\r"
    expect -re $prompt {
        send_user "\n\n                   #       Connect:     $host       #\n"
        send "\r"
        log_user 1
    } "*ssword:" {
        send_user "\n\n                   #  Aborted! - Invalid Login Password: $host  #\n"
        return
    }
} -re $prompt {
    send_user "\n\n                   #       Connect:     $host       #\n"
    send "\r"
    log_user 1
}

if {"$root_password" != "#null#"} {
    send "su -\r"
    expect "*sword:" {
        send "$root_password\r"
        expect "*sword" {
            send "exit\r"
            send_user "\n\n                   #  Aborted! - Invalid Root Password: $host  #\n"
            exit 2
        } -re $root_prompt {
            # send ctrl-c to force a prompt
            send \003
        }
    }
}

if {"$sudo_password" != "#null#"} {
    send "sudo su - root\r"
    expect "sword*" {
        send "$sudo_password\r"
        expect "*sword" {
            # send ctrl-c to force a prompt
            send \003
            send "exit\r"
            send_user "\n\n                   #  Aborted! - Invalid SUDO Password: $host  #\n"
            exit 2
        } -re $root_prompt {
            # send ctrl-c to force a prompt
            send \003
        }
    } -re $root_prompt {
        # send ctrl-c to force a prompt
        send \003
    }
}

#COMMANDS#

if {"$root_password" != "#null#" || "$sudo_password" != "#null#"} {
    expect -re $prompt {
        log_user 0
        # exiting root session
        send "exit\r"
    }
}

if {$connected} {
    expect -re $prompt
    log_user 0
    send "exit\r"
    send_user "\n\n                   #       Disconnect:  $host       #\n"
}
EXPECT

# print command usage
print_usage () {
    cat <<EOF
Usage: $prog [-hioOpPrRy] [--help] [-c count] [-f commands-file] [-F hosts-file] [-u username] host1 host2 host3...

Options:
    -c count
        the number of jobs to run concurrently; default is 10 if no value is
        provided

    -d  enable debug mode (print ALL output)

    -f file
        the file containing commands to be executed

    -F file
        the file containing hosts to be executed against

    -h, --help  display this help and exit

    -i  convenience mechanism equivalent to passing '#interact#'

    -o  log each system's output to a timestamped file (i.e. ~/ssh-exec.20120131_105929)

    -O  log each system's output to a separate file within a datestamped directory
        the naming format will be (i.e. ~/ssh-exec.20120131)

    -p  prompt for user password; allows for a fallback if key login fails

    -P  prompt for user password; disables spawning of ssh-agent

    -q  enable quiet mode (only prints job status to screen)

    -Q  enable silent mode (no printing of any output to screen)

    -r  run commands as root via 'su -' authentication

    -R  run commands as root via 'sudo su - root' authentication

    -u username
        the username used during initial ssh login; default is your current
        username

    -v  display version information and exit

    -V  enable verbose output

    -y  automatic yes to prompt
EOF
}

# print error message followed by usage and exit
error () {
    echo -e "\nERROR: $1\n" >&2
    print_usage >&2
    exit 1
}

# return generated password using provided hostname and pattern
#
# $1 - hostname: string source of letters used during substitution
# $2 - pattern:  root password with the letter 'X' (upper and lower case)
#                when immediately followed by a number being substituded
#                with the appropriate letter from the provided hostname
#                e.g. passAwordeM is derived from:
#                     pattern=passX3wordx1X4
#                     hostname=example.com
get_password () {
    awk -v host="$1" -v pattern="${2-}" '
        function getletter(case_pos) {
            char_case=substr(case_pos, 1, 1)
            pos=substr(case_pos, 2)
            char=substr(host, pos, 1)

            if (char_case == "X") {
                if (char == 1) {
                    return "!"
                } else if (char == 2) {
                    return "@"
                } else if (char == 3) {
                    return "#"
                } else if (char == 4) {
                    return "$"
                } else if (char == 5) {
                    return "%"
                } else if (char == 6) {
                    return "^"
                } else if (char == 7) {
                    return "&"
                } else if (char == 8) {
                    return "*"
                } else if (char == 9) {
                    return "("
                } else if (char == 0) {
                    return ")"
                } else if (char == "-") {
                    return "_"
                } else if (char == ".") {
                    return ">"
                } else {
                    return toupper(char)
                }
            } else {
                return tolower(char)
            }
        }

        BEGIN {
            do {
                idx = match(pattern, /[xX][0-9]/)
                token = substr(pattern, RSTART, RLENGTH)
                letter = getletter(token)
                if (idx != 0) {
                    gsub(token, letter, pattern)
                }
            } while (idx != 0)

            print pattern
        }' | sed -e 's| |\ |g'
}

# collect password patterns from user
get_password_patterns () {
    if $su; then
        echo -n "Enter Root Password Pattern: "
        stty -echo
        read root_password_pattern
        stty echo
        echo
    fi

    if $password_auth; then
        echo -n "Enter Login Password Pattern: "
        stty -echo
        read login_password_pattern
        stty echo
        echo
    fi

    if $sudo; then
        echo -n "Enter SUDO Password Pattern: "
        stty -echo
        read sudo_password_pattern
        stty echo
        echo
    fi

    # extract password prompts from commands
    while read password_prompt; do
        password_prompts+=( "$password_prompt" )
    done < <( awk -F: 'BEGIN {count=0} /^#password.*#$/ {
        if ($3) {
            print substr($0, index($0,$3), length($3)-1)
        } else {
            count++
            print "Enter Password #"count
        }
    }' <<<"$commands" )

    if [[ ${#password_prompts[*]} -gt 0 ]]; then
        # read in password patterns from stdin
        for password_prompt in "${password_prompts[@]}"; do
            echo -n "${password_prompt}: "
            stty -echo
            read password_pattern
            stty echo
            echo

            if [[ "$password_pattern" ]]; then
                password_patterns+=( "$password_pattern" )
            else
                error 'invalid password pattern'
            fi
        done
    fi
}

# convert provided commands into expect commands
insert_commands () {
    local count output

    output="$(mktemp -u -t XXXXX)"
    output="${1}.${output##*/}"
    cp "$1" "$output"
    shift

    count=0

    # print all output if debug is enabled
    if $debug; then
        sed 's/log_user 0/log_user 1/' "$output" > "${output}.tmp"
        mv "${output}.tmp" "$output"
    fi

    # disable logging connect/disconnect if not in verbose mode
    if ! $verbose; then
        sed '/onnect:  /d' "$output" > "${output}.tmp"
        mv "${output}.tmp" "$output"
    fi

    # initial command conversion
    sed '/^#COMMANDS#/ r /dev/stdin' $output > "${output}.tmp" < \
        <(sed -e '/^#/! s_\\\(.\)_\\\\\1_g' \
            -e '/^#/! s_\$_\\$_g' \
            -e '/^#/! s_\"_\\\"_g' \
            -e '/^#/! s_\[_\\[_g' \
            -e '/^#/! s_(_\(_g' \
            -e '/^#/! s_^_expect -re $prompt;send "_' \
            -e '/^#/! s_$_\\r"_' \
            -e 's_^#timeout#$_expect -re $prompt;set timeout 20;send "\\r"_' \
            -e 's_^#\(timeout .*\)#_expect -re $prompt;set \1;send "\\r"_' \
            -e 's_^#\(expect .*\)#.*_\1_' \
            <<<"$commands")
    sed '/^#COMMANDS#/d' "${output}.tmp" > "$output"

    # replace #password# token with expect code
    count=4
    while grep -q '^#password' "$output"; do
        read line password_count <<<$(awk -F: '/^#password/ {if ($2) {print NR,$2} else {print NR,1}; exit}' "$output")
        password_count=${password_count%#}

        # remove password token
        sed "$line r /dev/stdin" "$output" > "${output}.tmp" < <(
            echo "set password${count} \"#password${count}#\""
            for i in $(eval "echo {1..$password_count}"); do
                echo 'sleep 1'
                echo "send \"\$password${count}\r\""
            done
        )

        sed "${line}d" "${output}.tmp" > "$output"
        ((count+=1))
    done

    # expand built-in #interact# token; performed here instead of in parse_tokens for access to hostname
    while read line args <<<$(grep -n "^#interact" "$output" | head -1 | sed -e 's/:#interact\(.*\)/\1/' -e 's/#$//'); do
        # if no tokens are found we're done
        [[ -z "$line" ]] && break

        interactive=true

        # remove leading and trailing quotes while escaping double quotes
        args=$(sed -e "s/^'//" -e "s/'$//" -e 's/^"//' -e 's/"$//' -e 's/"/\\"/g' <<<"$args")

        # replace #interact# token with expect code
        sed "$line r /dev/stdin" "$output" > "${output}.tmp" <<INTERACT
send_user "\n\n                   ##      Entering Interactive Mode      ##\n"
send_user "                   ### type \"#x\" to end your interaction ###\n"
send "\r"
expect -re \$prompt
send "$args\r"
expect *
interact {
    \#x {
        send_user "\n\n                   ##      Exiting Interactive Mode       ##\n"
        # send ctrl-c to force a prompt
        send \003
        return
    }
    -o eof {
        send_user "\n\n                   #  Aborted! - User Disconnected During Interact: \$host  #\n"
        exit
    }
}
INTERACT

        sed "${line}d" "${output}.tmp" > "$output"
    done

    cat <(insert_expect_args "${output}" "$@")

    rm -f "${output}"*
}

# insert passwords into expect script
insert_expect_args () {
    local count host password output

    output="$(mktemp -u -t XXXXX)"
    output="${1}.${output##*/}"
    cp "$1" "$output"
    shift

    sed "s|#username#|$1|g" "$output" > "${output}.tmp"
    shift

    sed "s|#host#|$1|g" "${output}.tmp" > "$output"
    host="$1"
    shift

    count=1
    while [[ $# -gt 0 ]]; do
        password=$(get_password "$host" "${1-}")
        password="${password//\"/\\\\\"}"
        password="${password//\$/\\\\\$}"
        sed "s|#password$count#|$password|g" "$output" > "${output}.tmp"
        cat "${output}.tmp" > "$output"
        ((count+=1))
        shift
    done

    cat "$output"

    rm -f "${output}"*
}

# initialize ssh agent
ssh_agent_init () {
    echo -e "\nINITIALIZING SSH AGENT" >&2

    eval $(ssh-agent | sed '/echo Agent/d')

    # load all dsa & rsa keys (excluding symlinks)
    for key in $HOME/.ssh/*_?sa; do
        [[ ! -h "$key" ]] && ssh-add "$key"
    done
}

# destroy ssh agent
ssh_agent_destroy () {
    if kill $SSH_AGENT_PID 2>/dev/null; then
        echo -e "\nDESTROYING SSH AGENT" >&2
        export SSH_AGENT_PID=
        export SSH_AUTH_SOCK=
    fi
}

# parse tokens from commands
parse_tokens () {
    local commands_file line tokens user

    tokens=( )
    commands_file="$tmp_dir/commands"

    echo "$commands" > "$commands_file"

    if [[ -d "$recipes_dir" ]]; then
        # load user defined tokens
        tokens=
        for token_file in $recipes_dir/*; do
            if [[ -r "$token_file" ]]; then
                if [[ "$tokens" ]]; then
                    tokens="${tokens}|^#${token_file##*/}"
                else
                    tokens="^#${token_file##*/}"
                fi
            fi
        done

        # expand user defined tokens
        if [[ "$tokens" ]]; then
            while read token args <<<$(egrep -n "$tokens" "$commands_file" | head -1 | sed -e 's/#\(.*\)/\1/' -e 's/#$//'); do
                # if no tokens are found we're done
                [[ -z "$token" ]] && break

                read line token <<<$(sed 's/:/ /' <<<"$token")

                # load recipe from associated token file
                recipe=$(cat "${recipes_dir}/$token")

                # replace args within recipe
                count=1
                while read arg; do
                    recipe=$(sed "s/\$arg${count}/$arg/g" <<<"$recipe")
                    ((count+=1))
                done < <(eval "for arg in $args; do echo \$arg; done")

                # sanity check for missing args
                grep -q '$arg[[:digit:]]' <<<"$recipe" && { echo "ERROR: missing argument for token: $token"; exit 1; }

                # replace token with associated recipe
                sed "$line r /dev/stdin" "$commands_file" > "${commands_file}.tmp" <<<"$recipe"

                # remove token
                sed "${line}d" "${commands_file}.tmp" > "$commands_file"
            done
        fi
    fi

    # expand built-in #passwd# token
    while grep -q '^#passwd' "$commands_file"; do
        read line user <<<$(awk '/^#passwd/ {if ($2) {print NR,substr($0, index($0,$2), length($2)-1)} else {print NR,"root"}; exit}' "$commands_file")

        # insert shell commands for password change
        sed "$line r /dev/stdin" "$commands_file" > "${commands_file}.tmp" <<PASSWD
passwd $user
#password:2:Enter new password for $user#
PASSWD

        # remove passwd token
        sed "${line}d" "${commands_file}.tmp" > "$commands_file"
    done

    # expand built-in #user# token
    commands=$(sed "s/#user#/$username/" "$commands_file")

    rm -f $commands_file{,.tmp}
}

# execute expect script against provided host
#
# NOTE: if you attempt to connect to the same host multiple times
#       concurrently, you will likely see failures due to the speed
#       in which the connections are attempted
#
# $1 - host - the host to run script against
run_hosts () {
    local count host logger_pid passwords total prev_batch batch finished running

    batch=1
    count=1
    total=$#

    # determine batch number if outputting to existing directory
    if [[ -n "$output_dir" ]]; then
        prev_batch=$(ls -1 "$output_dir" | tail -n1)
        [[ -n "$prev_batch" ]] && batch=$(expr ${prev_batch%%x*} + 1)
    fi

    [[ $batch -lt 10 ]] && batch="0${batch}"

    # watch for finished host output to print to stdout
    if [[ $concurrency -gt 1 ]]; then
        # check root password on first host before we hit everyone with an incorrect password
        if $su || $sudo; then
            echo -en '\n\n                   # Validating Root Password...'
            cat <(insert_expect_args "$script" "$username" "$1" "${root_password_pattern-}" "${sudo_password_pattern-}" "${login_password_pattern-}") | sed '/#COMMANDS#/d' | expect - > /dev/null 2>&1
            if [[ $? -ne 0 ]]; then
                echo -e 'FAILED #\n'
                echo "ABORT: Failed to authenticate as root on host: $1"
                exit 1
            else
                echo -e 'OK #\n'
            fi
        fi

        # spawn thread to handle output of finished jobs
        {
            finished_count=1
            finished_output_logs=

            # load expected log files in original order
            for host in "${hosts[@]}"; do
                if [[ $finished_count -ge 10 ]]; then
                    output_log="${tmp_dir}/${batch}x${finished_count}-${host}.log"
                else
                    output_log="${tmp_dir}/${batch}x0${finished_count}-${host}.log"
                fi

                finished_output_logs=(${finished_output_logs[@]} "$output_log")

                ((finished_count+=1))
            done
            finished_count=1


            while [[ $finished_count -le $total ]]; do
                sleep 1

                # look for finished log file from next host
                while [[ -r "${finished_output_logs[0]}" ]]; do
                    file="${finished_output_logs[0]}"

                    # pop finished log off stack
                    unset finished_output_logs[0]
                    finished_output_logs=("${finished_output_logs[@]-}")

                    ! $quiet && ! $silent && cat "$file"

                    if [[ -n "$output_dir" ]]; then
                        strip_color_codes "$file"
                        output="${output_dir}/${file##*/}"
                        mv "$file" "${output%.log}"
                    else
                        rm -f "$file"
                    fi

                    ((finished_count+=1))
                done
            done
        } &

       logger_pid=$!
    fi

    while [[ $# -gt 0 ]]; do
        passwords=( )
        host="$1"

        if [[ $count -ge 10 ]]; then
            output="${batch}x${count}-${host}"
        else
            output="${batch}x0${count}-${host}"
        fi

        if [[ $concurrency -gt 1 ]]; then
            running=$(jobs -p | grep -v $logger_pid | wc -l)

            if [[ $running -lt $concurrency ]]; then
                $debug || $quiet && echo -e "\nSpawning job $count of $total for $host" |  tr '[:lower:]' '[:upper:]' >&2

                {
                    jobnum=$count

                    # convert patterns to host based passwords
                    if [[ ${#password_patterns[*]} -gt 0 ]]; then
                        for pattern in "${password_patterns[@]}"; do
                            passwords+=( "$(get_password $host "${pattern-}")" )
                        done
                    fi

                    # run expect script via stdin to avoid passwords being exposed via ps
                    expect -f <(insert_commands "$script" "$username" "$host" "${root_password_pattern-}" "${sudo_password_pattern-}" "${login_password_pattern-}" "${passwords[@]-}") > "${tmp_dir}/${output}.running"

                    # insert white space following host disconnect
                    $verbose || echo -e '\n' >> "${tmp_dir}/${output}.running"

                    $debug || $quiet && echo -e "\nJob $jobnum of $total Completed" |  tr '[:lower:]' '[:upper:]' >&2

                    mv "${tmp_dir}/${output}.running" "${tmp_dir}/${output}.log"
                } &

                ((count+=1))
                shift
            fi
        else
            $debug || $quiet && echo -e "\nSpawning job $count of $total for $host" |  tr '[:lower:]' '[:upper:]' >&2

            # convert patterns to host based passwords
            if [[ ${#password_patterns[*]} -gt 0 ]]; then
                for pattern in "${password_patterns[@]}"; do
                    passwords+=( "$(get_password $host "${pattern-}")" )
                done
            fi

            # run expect script via stdin to avoid passwords being exposed via ps
            if ! $interactive; then
                expect -f <(insert_commands "$script" "$username" "$host" "${root_password_pattern-}" "${sudo_password_pattern-}" "${login_password_pattern-}" "${passwords[@]-}") | tee -a "${tmp_dir}/${output}.running"

                [[ $? -eq 2 ]] && { echo "ABORT: Failed to authenticate as root on host: $host"; exit 1; }

                # insert white space following host disconnect
                $verbose || echo -e '\n' | tee -a "${tmp_dir}/${output}.running"

                if [[ -n "$output_dir" ]]; then
                    strip_color_codes "${tmp_dir}/${output}.running"
                    mv "${tmp_dir}/${output}.running" "${output_dir}/${output}"
                fi
            else
                expect -f <(insert_commands "$script" "$username" "$host" "${root_password_pattern-}" "${sudo_password_pattern-}" "${login_password_pattern-}" "${passwords[@]-}")
                [[ $? -eq 2 ]] && { echo "ABORT: Failed to authenticate as root on host: $host"; exit 1; }
                echo
            fi

            $debug || $quiet && echo -e "\nJob $count of $total Completed" |  tr '[:lower:]' '[:upper:]' >&2

            ((count+=1))
            shift
        fi
    done

    wait
}

# strip color codes from input file
#
# $1 - file - the file to strip color codes from
strip_color_codes () {
    # detect sed extended regular expression option
    if sed -? 2>&1 | grep -q ' -r'; then
        sed -r -e 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' -e 's/^\x1B\]0;.*\a//' -e 's/# \^C/#/g' -e 's/\r$//' "$1" >> "${1}.tmp"
    else
        sed -E -e 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g' -e 's/^\x1B\]0;.*\a//' -e 's/# \^C/#/g' -e 's/\r$//' "$1" >> "${1}.tmp"
    fi

    mv "${1}.tmp" "$1"
}


# process arguments
for arg in $@; do
    case "$arg" in
        -c)
            concurrency='-c'
            ;;
        -c[0-9]*)
            concurrency=${arg#-c}
            ;;
        -d)
            debug=true
            verbose=true
            ;;
        -h | --help)
            print_usage
            exit 0
            ;;
        -i)
            interactive=true
            commands='#interact#'
            ;;
        -o)
            output_file='-o'
            ;;
        -O)
            output_dir='-O'
            ;;
        -p)
            ssh_agent=true
            password_auth=true
            ;;
        -P)
            ssh_agent=false
            password_auth=true
            ;;
        -q)
            quiet=true
            ;;
        -Q)
            quiet=true
            silent=true
            ;;
        -r)
            $sudo && error 'cannot combine -R with -r'
            su=true
            ;;
        -R)
            $su && error 'cannot combine -r with -R'
            sudo=true
            ;;
        -f)
            commands='-f'
            ;;
        -F)
            hosts=( '-F' )
            ;;
        -u)
            username='-u'
            ;;
        -v)
            echo $prog $version
            exit 0
            ;;
        -V)
            verbose=true
            ;;
        -y)
            continue=true
            ;;
         *)
            if [[ "$concurrency" == '-c' ]] && [[ "$arg" =~ ^[0-9]+$ ]]; then
                concurrency=$arg
            elif [[ "$commands" == '-f' ]]; then
                [[ ! -r "$arg" ]] && error 'cannot read provided command file'
                commands=$(cat "$arg")
            elif [[ ${#hosts[*]} -ne 0 && "${hosts[0]}" == '-F' ]]; then
                [[ ! -r "$arg" ]] && error 'cannot read provided hosts file'
                hosts=( $(tr '\n' ' ' < "$arg") )
            elif [[ "$output_file" == '-o' ]]; then
                output_file="$HOME/ssh-exec.$(date +%Y%m%d_%H%M%S)"
                hosts+=( "$arg" )
            elif [[ "$output_dir" == '-O' ]]; then
                output_dir="$HOME/ssh-exec.$(date +%Y%m%d)"
                [[ -f "$output_dir" ]] && { echo "ERROR: file already exists with name '$output_dir'"; exit 1; }
                hosts+=( "$arg" )
                mkdir -p "$output_dir"
            elif [[ "$username" == '-u' ]]; then
                username="$arg"
            else
                hosts+=( "$arg" )
            fi
            ;;
    esac
done

# sanity check
[[ ${#hosts[*]} -eq 0 || "${hosts[0]}" == '-F' ]] && error 'no hosts provided'
[[ "$commands" == '-f' ]] && error 'no commands provided'

# set default concurrecy if number was not provided
[[ "$concurrency" == '-c' ]] && concurrency=10

# overide concurrency if only one host is provided
[[ ${#hosts[*]} -eq 1 ]] && [[ "$concurrency" -gt 1 ]] && concurrency=1

# set default username if none was provided
[[ "$username" == '-u' ]] && username=$USER

# capture commands from stdin
if [[ -z "$commands" ]]; then
    stdin=$(cat <&0)

    if [[ "$stdin" ]]; then
        commands="$stdin"
    elif [[ -z "$stdin" ]]; then
        error 'no commands provided'
    fi
fi

# parse tokens within commands
parse_tokens

# sanity check
if grep -q '^#interact#' <<<"$commands"; then
    [[ $concurrency -gt 1 ]] && error '#interact# is not allowed when combined with concurrency'
    [[ -n "$output_dir" ]] && error '#interact# is not allowed when combined with -O'
    [[ "$output_file" != '/dev/null' ]] && error '#interact# is not allowed when combined with -o'
fi

# check for active ssh-agent
if $ssh_agent && ! ssh-add -l >/dev/null 2>&1; then
    load_ssh_agent=true
fi

# prompt user to continue
{
    if $su || $sudo; then
        echo -e "\nCOMMANDS (run as root):\n"
    else
        echo -e "\nCOMMANDS (run as $username):\n"
    fi

    while read cmd;  do
        echo -e "\t$cmd"
    done <<<"$commands"

    if [[ ${#hosts[*]} -gt 1 ]]; then
        if [[ $concurrency -gt 1 ]]; then
            echo -e "\nHOSTS (up to $concurrency systems executed concurrently):"
        else
            echo -e "\nHOSTS (executed incrementally):"
        fi

        for host in "${hosts[@]}"; do
            echo -e "\t$host"
        done
    else
        echo -e "\nHOST:\t${hosts[*]}"
    fi

    if $load_ssh_agent; then
        echo -e '\nNOTE:'
        echo -e '\tYou currently do not have any keys loaded into an ssh agent.'
        echo
        echo -e '\tIf you choose to continue an agent will be started for you.'
        echo
        echo -e '\tYou will then be prompted to enter the passphrase for any keys'
        echo -e '\tfound in your ~/.ssh directory.'
        echo
        echo -e '\tNote: You only need to provide the passphrase for the key'
        echo -e '\t      necessary for the servers you are executing against.'
        echo
        echo -e '\t      Simply hitting "Enter" when prompted for an unnecessary'
        echo -e '\t      key is sufficient to skip loading that key.'
        echo
        echo -e '\tThis agent will be destroyed when ssh-exec exits.'
    fi

    if [[ -n "$output_dir" ]]; then
        echo -e '\nNOTE:'
        echo -e "\tEach server's output will be saved to a separate file in:\n\t\t$output_dir"
    fi

    if [[ "$output_file" != '/dev/null' ]]; then
        echo -e '\nNOTE:'
        echo -e "\tAll server output will be saved to:\n\t\t$output_file"
    fi

    warnings=( )
    # hand-holding: check for password change without password being provided
    if ! grep -q '^#password:2' <<<"$commands"; then
        if grep -q 'passwd' <<<"$commands" && ! grep -q '-' <<<"$commands"; then
            warnings+=("passwd will require the #password:2# token\n\t\t- you may want to consider using the builtin #passwd <username># token instead")
        fi
    fi

    # hand-holding: check for rm -rf
    if grep -q 'rm -rf /' <<<"$commands"; then
        warnings+=("rm -rf can be dangerous when automated!\n\t  make sure you double check the commands above before continuing")
    fi

    # hand-holding: check for no logging of output
    if $quiet && [[ "$output_file" == '/dev/null' ]] && [[ -z "$output_dir" ]]; then
        warnings+=("System output to screen has been disabled AND you are not saving the output to a file!\n\tBy continuing you are executing commands with no way of knowing their results.\n\tThis is NOT advised!")
    fi

    if [[ ${#warnings[*]} -gt 0 ]]; then
        echo -e '\nWARNINGS:'
        for warning in "${warnings[@]}"; do
            echo -e "\t* $warning\n"
        done
    fi
} | tee -a "$output_file"

# flush stdin
0<&-
exec 0</dev/tty

if ! $continue; then
    echo -e -n "\nAre you sure you want to continue [y/N]? "
    read continue

    if [[ ! "$continue" =~ y|Y ]]; then
        echo 'Aborted!'
        exit 0
    fi
fi

# load ssh-agent
$load_ssh_agent && ssh_agent_init

# collect password patterns from user
get_password_patterns

# run expect script against all provided hosts
if $silent; then
    run_hosts ${hosts[@]} > "$output_file" 2>/dev/null
elif $quiet; then
    run_hosts ${hosts[@]} > "$output_file"
elif $interactive; then
    run_hosts ${hosts[@]}
else
    run_hosts ${hosts[@]} | tee -a "${output_file}"
    [[ "$output_file" != '/dev/null' ]] && strip_color_codes "${output_file}"
fi

exit 0

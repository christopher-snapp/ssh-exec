#!/bin/bash
#
# Copyright (C) 2011, Christopher A. Snapp <snappca@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# enable strict error checking
# set -ue

# spaces should never be separators dangit!
# IFS="\t\n"

version=0.9.5
prog=$(basename $0)

su_do=false

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/ucb:/usr/local/bin:/usr/local/sbin:/opt/local/sbin:/opt/local/bin:/usr/lib:/usr/sfw/bin:/opt/sfw/bin:/usr/etc:/usr/bsd

# print command usage
#
# $1 - boolean determining if full formatted output should be printed
print_usage () {
    local verbose

    verbose=false

    if [[ $# -gt 0 ]]; then
        verbose=true
        b='\033[1m'
        u='\033[4m'
        c='\033[0m'
    fi

    $verbose && echo "$prog $version" | tr '[:lower:]' '[:upper:]'
    $verbose && echo
    $verbose && echo -e "${b}NAME${c}"
    $verbose && echo -e "\t${b}$prog${c} â€” executes commands on remote hosts; optionally as root"
    $verbose && echo

    echo -e "${b}SYNOPSIS${c}"
    echo -e "\t${b}$prog${c} [${b}-hr${c}] [${b}-f${c} ${u}file${c}] ${u}host1..host2..${c}"
    echo

    $verbose && echo -e "${b}DESCRIPTION${c}"
    $verbose && echo -e "\tThe primary goal of this script is to provide a secure method"
    $verbose && echo -e "\tfor executing commands on remote hosts as root without sudo."
	$verbose && echo
    $verbose && echo -e "\tNote that commands can be provided via file or STDIN."
	$verbose && echo
    $verbose && echo -e "\t${b}Running as Root${c}"
	$verbose && echo -e "\tRunning as root will require that a root password be "
    $verbose && echo -e "\tprovided as a pattern where the letter 'X' (upper or lower case)"
	$verbose && echo -e "\twhen immediately followed by a number will be substituted"
	$verbose && echo -e "\twith the appropriate letter from the provided hostname."
	$verbose && echo
	$verbose && echo -e "\tExample:\t pattern: ${b}passX3wordx1X4${c}"
	$verbose && echo -e "\t\t\thostname: ${b}example.com${c}"
    $verbose && echo -e "\t\t\t  result: ${b}passAwordeM${c}"
    $verbose && echo
    $verbose && echo -e "\t${b}Troubleshooting${c}"
	$verbose && echo -e "\tIt is expected that the results of your script end"
	$verbose && echo -e "\twith a prompt as recognized by the regular expression:"
    $verbose && echo
	$verbose && echo -e "\t\t\t${b}/(>|%|#|\\$) \$/${c}"
    $verbose && echo
	$verbose && echo -e "\tYour script will hang should the prompt not be detected."
    $verbose && echo

    echo -e "${b}OPTIONS${c}"
    echo -e "\t${b}-f${c} ${u}file${c}"
    echo -e "\t\tthe file containing commands to be executed"
    echo
    echo -e "\t${b}-h${c}\tdisplay this help and exit"
    echo
    echo -e "\t${b}-r${c}\trun commands as root"
    echo
}

# print error message followed by usage and exit
error () {
    echo -e "\nERROR: $1\n" >&2
    print_usage >&2
    exit 1
}

# return generated password using provided hostname and pattern
#
# $1 - hostname: string source of letters used during substitution
# $2 - pattern:  root password with the letter 'X' (upper and lower case)
#                when immediately followed by a number being substituded
#                with the appropriate letter from the provided hostname
#                e.g. passAwordeM is derived from:
#                     pattern=passX3wordx1X4
#                     hostname=example.com
get_password () {
    # REDO 20110503 - find out how to accomplish variable defs in solaris
    awk -v host="$1" -v pattern="$2" '
        function getletter(case_pos) {
            case=substr(case_pos, 1, 1)
            pos=substr(case_pos, 2)

            return (case == "X") ? toupper(substr(host, pos, 1)) : tolower(substr(host, pos, 1))
        }

        BEGIN {
            do {
                idx = match(pattern, /[xX][0-9]/)
                pattern=substr(pattern, 0, idx) getletter(substr(pattern, idx, RLENGTH)) substr(pattern, idx+RLENGTH)
            } while (idx != 0)

            print pattern
        }'
}


# convert provided commands into expect commands
insert_commands () {
    local script

    script="${1:?'ERROR: script file not provided'}"

    # initial command conversion
    echo "$commands" \
    | sed -e '/^#/! s_\\\(.\)_\\\\\1_g' \
          -e '/^#/! s_\$_\\$_g' \
          -e '/^#/! s_\"_\\\"_g' \
          -e '/^#/! s_\[_\\[_g' \
          -e '/^#/! s_(_\(_g' \
          -e '/^#/! s_^_expect -re $prompt;send "_' \
          -e '/^#/! s_$_\\r"_' \
          -e 's_^#\(timeout .*\)#.*_set \1_' \
          -e 's_^#\(expect .*\)#.*_\1_' \
        >> "$script"

    # replace #interact# token with expect code
    sed -i '/^#interact#/ r /dev/stdin' $script <<'INTERACT'
send_user "\n\n                   ##      Entering Interactive Mode      ##\n"
send_user "                   ### type \"#x\" to end your interaction ###\n"
send "\r"
expect -re $prompt
interact {
    \#x {
        send_user "\n\n                   ##      Exiting Interactive Mode       ##\n"
        return
    }
    -o eof {
        send_user "\n\n                   #  Aborted! - User Disconnected During Interact: $host  #\n"
        exit
    }
}
INTERACT

    # remove interact token
    sed -i '/^#interact/d' "$script"

    # shift expect args if root password is provided
    $su_do && count=1

    # replace #password# token with expect code
    while grep -q '^#password' "$script"; do
        read line password_count <<<$(awk -F: '/^#password/ {if ($2) {print NR,$2} else {print NR,1}; exit}' "$script")
        count=$(( $count+1 ))

        # remove password token
        sed -i "$line r /dev/stdin" "$script" < <(
            echo "set password${count} [lindex \$argv $count]"
            for i in $(seq $password_count); do
                echo 'sleep 1'
                echo "send \"\$password${count}\r\""
            done
        )

        sed -i "${line}d" "$script"
    done
}

# sanity check
[[ $# -lt 1 ]] && error 'not enough arguments provided'

# dependency check
[[ "$(which expect)" ]] || error 'expect command is not available'

# process arguments
while getopts :hrf: OPTION; do
    case "$OPTION" in
        f)
            [[ ! -r "$OPTARG" ]] && error 'cannot read provided command file'

            commands=$(cat "$OPTARG")

            shift $(($OPTIND-1))
            ;;
        r)
            su_do=true
            password_prompts=( "Enter Root Password Pattern" )

            #FIXME 20110610 - -r combined with -f causes one to be consumed
#             shift
            ;;
        h)
            print_usage 'verbose' >&2
            exit 0
            ;;
        \:)
            error "missing argument for option: -$OPTARG"
            ;;
        \?)
            error "unknown option: -$OPTARG"
            ;;
    esac
done

hosts=( $@ )
[[ ${#hosts[*]} -ne 0 ]] || error 'no hosts provided'

# check for commands from stdin
if [[ -z "$commands" ]]; then
    stdin=$(cat <&0)

    if [[ "$stdin" ]]; then
        commands="$stdin"
    elif [[ -z "$stdin" ]]; then
        error 'no commands provided'
    fi
fi

# extract password prompts from commands
while read password_prompt; do
    password_prompts+=( "$password_prompt" )
done < <( awk -F: 'BEGIN {count=0} /^#password.*#$/ {
    if ($3) {
        print substr($0, index($0,$3), length($3)-1)
    } else {
        count++
        print "Enter Password #"count
    }
}' <<<"$commands" )

tmp_dir="$(mktemp -dt $prog.XXXXX)" || error 'cannot create temp directory!'
script="${tmp_dir}/commands.exp"
trap "break 2>/dev/null; rm -rf $tmp_dir" EXIT HUP INT QUIT ABRT PIPE ALRM TERM

# initialize expect script used during ssh session
cat >> "$script" <<'HEAD'
#!/usr/bin/expect
set timeout 10
set prompt "(>|%|#|\\$) $"
set host [lindex $argv 0]

log_user 0

spawn -noecho ssh $host
set connected 1

expect_after {
    timeout {
        send_user "\n\n                   #  Aborted! - Timeout Looking for Prompt: $host  #\n"
        return
    } default {
        send_user "\n\n                   #  Aborted! - Error State Observed: $host  #\n"
        return
    }
}

# user login
expect "*nter passphrase" {
    send_user "\n\n                   #  Aborted! - Missing Passphrase: $host  #\n"
    return
} "*yes/no" {
    send_user "\n\n                   # Accepting Authenticity: $host #\n"
    send "yes\r"
    send_user "                   #       Connect:    $host      #\n"
} -re $prompt {
    send_user "\n\n                   #       Connect:    $host      #\n"
    send "\r"
    log_user 1
}
HEAD


if $su_do; then
    cat >> "$script" <<'SUDO1'
set password1 [lindex $argv 1]
# send ctrl-c to force a prompt
send \003
sleep 1
send "su -\r"
expect "*sword:" {
    send "$password1\r"
    expect "su: *" {
        send "exit\r"
        send_user "\n\n                   #  Aborted! - Invalid Root Password: $host  #\n"
        exit
    } -re $prompt {
        # send ctrl-c to force a prompt
        send \003
SUDO1

        insert_commands "$script"

    cat >> "$script" <<SUDO2
        # exiting root session
        send "exit\r"
    }
}
SUDO2
else
    insert_commands "$script"
fi

# close expect script out
cat >> "$script" <<'TAIL'
if {$connected} {
    sleep 1
    expect -re $prompt
    log_user 0
    send "exit\r"
    send_user "\n\n                   #       Disconnect: $host      #\n"
 }
TAIL

echo -e "\nCOMMANDS:"
while read cmd;  do
    echo -e "\t$cmd"
done <<<"$commands"

echo -e "\nHOSTS:"
for host in "${hosts[@]}"; do
    echo -e "\t$host"
done

# flush stdin before prompting to continue
0<&-
exec 0</dev/tty

echo -e -n "\nAre you sure you want to continue [y/N]? "
read continue
if [[ ! "$continue" =~ y|Y ]]; then
    echo -e '\nAborted!'
    exit 0
fi

# read in password patterns from stdin
for password_prompt in "${password_prompts[@]}"; do
    echo -n "${password_prompt}: "
    stty -echo
    read password_pattern
    stty echo
    echo

    if [[ "$password_pattern" ]]; then
        password_patterns+=( "$password_pattern" )
    else
        error 'invalid password pattern'
    fi
done

# run generated script against all provided hosts
for host in "${hosts[@]}"; do
    passwords=( )

    # check to see if host is available
    if ping -qn -c1 -W1 "$host" | grep -q '0 received'; then
        echo -e "\n$(echo "#   $host Unavailable   #" | tr '[:lower:]' '[:upper:]')"
        continue
    fi

    # convert patterns to host based passwords
    for pattern in "${password_patterns[@]}"; do
        passwords+=( $(get_password $host $pattern) )
    done

    expect -f "$script" "$host" "${passwords[@]}"
done

exit 0
